Console.Write("abc");  输出到控制台中，且在最后位置不换行，参数至少有一个以上。
Console.WriteLine(); 输出到控制台中，且在最后位置换行，有无参数均可，若没有参数，则为空行。

字符串的读取：	
	读取一条字符串(String)用函数Console.Readline();
读取字符
	读取字符(char)用函数Console.Read();

类型转换函数：
	Convert.ToDouble()把数字转换为double型数字
	Convert.ToInt32()把数字转换为int型数字

@控制符 前缀@可以使引号里的内容原样输出，而不理会里面的转义字符。
+运算符
+先将变量 转化为字符串，然后拼接
Console.WriteLine("The number is {0}",number);逗号分隔，格式化方式输出，用占位符方式的好处使可以在占位符{}中添加各种格式控制信息。
	向占位符中添加格式字符串来控制数值的位数，其格式为{i，w},i参数索引，w宽度值(数值位数)
	{0,9:C2} 参数索引，数值宽度，货币格式，小数位数
C#区分大小写
const 常量
关键字(Keyword)
C#是强类型语音，每个变量都有严格的类型。(隐式转换、显示转换以及字符串和数值间的转换三种)
 引用型参数 ref
	当参数位数组、结构体复杂类型时，自动为地址传递；当参数为基本类型时，要用关键字ref才能实现地址传递。
输出型参数（out返回有用得计算结果）
	ref型参数使用前必须赋值
	out型参数使用前只能用来从函数返回结果，而不能用来向函数传递数据
参数匹配：调用函数时，实参和形参得类型应当匹配。如果不匹配，则隐式转化。
函数反复调用本身得行为称为递归调用。
局部变量，当调用函数时，变量在内存中创立；当退出函数时，变量从内存中清除。（形式参数也称为局部变量）

类和对象
	面向对象编程(Object-Oriented Programming,OOP)，数据和对象的操作被封装成“零件”-->组装成程序
	类、封装、接口和对象。
	类(class)
	封装(Encapsulation)  ：汽车的运行原理已经封装在汽车内部，提供给司机的只是一个简单的试用接口
			   面向对象技术把事物的属性(数据)和行为(函数)的实现封装在类中，形成一个可以重复使用的“零件”。
	接口(Interface)通过类的接口使用类
	软件维护和修改的成本已将占到了整个软件开发成本的80%。类的这一编程思想极大地方便了程序地维护和修改，降低了软件成本。
	对象(Object)
		:类时一个抽象地概念，对象则是类的具体实例。比如人是一个类、李白，杜甫都是对象

		类用关键字class定义，类地名称紧跟在class后面
			成员由可见性、数据类和名称三部分组成。
			成员变量，成员函数
		类的功能由类的成员实现，一般情况下类的属性用成员变量表示	
					          类的行为用成员函数实现

	类由两大特点：封装和接口
		公有成员实现接口，公有成员使用关键字public声明
		如：public void Meow(); public void Cha();  public int age;

		私有成员实现封装，私有成员使用关键字private声明
		如：private int miceCount;  private void Hello();
		关键字public和private常常被统称为修饰符(Modifiers)。
	公有成员可以被外界调用，私有成员不能被外界调用(只能在类的定义代码中使用)，这类函数一般起辅助作用，所有有时也称之为辅助函数(Helper)。
	把成员变量或成员函数标记为private，可以有效确保它们只在类内部工作，确保数据不被外界所修改，大大增强了程序的健壮性。

	创建类的过程叫做类的实例化。
	创建同一个类的多个对象，则它们共享函数成员的代码，但不共享数据成员，每个对象都会存在内存中开辟新的空间来存储自己的数据成员。
	
	用公有函数读写变量不但可以对数据进行合法性检查，而且提高了类的封装性。
	这种专门用来读写数据成员的函数称为访问器(Assessor)

	人们习惯于把年龄作为一个变量对待，用函数访问不符合人们的思维习惯。为了解决这个问题，
	C#设计了一种特殊的语法--属性(Property)。
		属性既有封装性，又可以进行合法检查，还符合变量的使用习惯。

当创建对象时，系统会调用默认的构造函数，用默认值初始化所有成员变量。比如整型变量初始化为0，实型变量初始化为0.0，布尔型变量初始化为fasle,字符串变量初始化为null(空)

描述类的整体特征的量可以用静态变量实现。

没有用static关键字修饰的变量称为实例变量，实例变量通过对象名引用，而静态变量通过类名引用（使用静态成员不需要声名对象，只需要使用类名）
	如：double alpha = Math.PI/3 （Math类的成员基本上均为静态成员）
	没有创建Math类的对象，直接通过类名调用了函数	
静态构造函数可以使用static关键字声明。

常量成员
	const常量:1.易于阅读和修改 2.更健壮
	只能在声明的时候初始化，const常量成员是隐式静态的。
	
	readonly常量
	每个对象可以有不同的值，readonly常量是非静态常量，把它初始化放在构造函数里。

重载(Overload)
	函数重载的调用原则是参数"最佳匹配(Best-fit)"

构造函数的重载
	构造函数均和类同名，单参数类型不同，系统会自动调用参数完全匹配那个构造函数。


重载运算符由关键字operator声明，必须定义为静态
	public static Comple operator +(Complex x1,Complex z2)

在类外要通过对象名来访问类的成员换，this关键字,为了在函数内部使用重名的成员变量，
必须this关键字显示地访问类地成员变量。

索引，可以让我们像数组那样访问类的数据成员。
	public double this[int index]
索引的函数体与属性类似，也是用get和set访问其。get访问器用于获取成员变量的值，set访问器用于成员变量赋值。
C#还为我们提供了多维索引，只需提供下标即可，需要嵌套的switch语句才能实现。

值类型和引用类型
C#的一个优点是程序员 不需要为内存管理操心，垃圾回收器会自动执行内存管理工作
内存中有一块区域称为栈(Stack)，先入栈数据得作用域总比后入栈得要长

C#把类的成员变量存储在堆(Heap)上
	数组对象都存储在堆中，称为引用型变量(Reference type)

Cat Kitty;
声明了Cat对象的名称，仅再栈上创建了一个引用符，只有使用new运算符后，对象才正真被创建于堆中
当对象没有实例化时，引用符的值为null
引用符是对象在内存中的地址

声明对象数组的方式
	声明对象数组的方式和普通数组相同
	声明一组"引用符":Cat[] cats=new Cat[5]
	让每个引用符指向一个对象:Cat[i]=new Cat();(用for循环语句<cats.Length)

类视图

面向对象编程:继承
继承(Inherit) 基类(Base class) 派生类(Derived class)
	派生类自动拥有基类中定义的变量和函数，无须重新定义，实现代码的重复利用。

继承语法: class Mammal:Vertebrata
	protected成员只能被派生类使用，或者设计一个公有属性，通过属性使用私有变量


	把基类中的函数设计为虚函数(利用关键字virtual来定义为虚拟函数)，然后在派生类中重写(Override)该函数。
	格式：public override void Breathe()

重写和重载的区别
	重载指同一个类中由若干个名称相同但参数不同的函数

只能重写基类中的虚函数，普通函数不能重写。要想在派生类中修改基类的普通函数
需要用new关键字隐藏基类中的函数


























































































